use anyhow::bail;

// values computed with included python script
#[rustfmt::skip]
const PAN_TABLE: [(f32, f32); 65] = [
    (1.0, 0.0), // -32
    (0.98203515625, 0.04355859375000004), // -31
    (0.9646406249999999, 0.08573437500000003), // -30
    (0.94781640625, 0.12652734374999997), // -29
    (0.9315625, 0.16593749999999996), // -28
    (0.91587890625, 0.20396484375), // -27
    (0.900765625, 0.24060937500000001), // -26
    (0.88622265625, 0.27587109374999996), // -25
    (0.87225, 0.30974999999999997), // -24
    (0.85884765625, 0.34224609375), // -23
    (0.8460156249999999, 0.373359375), // -22
    (0.83375390625, 0.40308984374999995), // -21
    (0.8220624999999999, 0.4314375), // -20
    (0.81094140625, 0.45840234375), // -19
    (0.800390625, 0.48398437499999997), // -18
    (0.79041015625, 0.50818359375), // -17
    (0.7809999999999999, 0.5309999999999999), // -16
    (0.77216015625, 0.55243359375), // -15
    (0.7638906249999999, 0.5724843749999999), // -14
    (0.7561914062499999, 0.5911523437499999), // -13
    (0.7490625, 0.6084375), // -12
    (0.74250390625, 0.62433984375), // -11
    (0.736515625, 0.638859375), // -10
    (0.73109765625, 0.65199609375), // -9
    (0.72625, 0.66375), // -8
    (0.72197265625, 0.67412109375), // -7
    (0.7182656249999999, 0.6831093749999999), // -6
    (0.7151289062499999, 0.6907148437499999), // -5
    (0.7125625, 0.6969375), // -4
    (0.71056640625, 0.70177734375), // -3
    (0.709140625, 0.705234375), // -2
    (0.70828515625, 0.70730859375), // -1
    (0.708, 0.708), // 0
    (0.70730859375, 0.70828515625), // 1
    (0.705234375, 0.709140625), // 2
    (0.70177734375, 0.71056640625), // 3
    (0.6969375, 0.7125625), // 4
    (0.6907148437499999, 0.7151289062499999), // 5
    (0.6831093749999999, 0.7182656249999999), // 6
    (0.67412109375, 0.72197265625), // 7
    (0.66375, 0.72625), // 8
    (0.65199609375, 0.73109765625), // 9
    (0.638859375, 0.736515625), // 10
    (0.62433984375, 0.74250390625), // 11
    (0.6084375, 0.7490625), // 12
    (0.5911523437499999, 0.7561914062499999), // 13
    (0.5724843749999999, 0.7638906249999999), // 14
    (0.55243359375, 0.77216015625), // 15
    (0.5309999999999999, 0.7809999999999999), // 16
    (0.50818359375, 0.79041015625), // 17
    (0.48398437499999997, 0.800390625), // 18
    (0.45840234375, 0.81094140625), // 19
    (0.4314375, 0.8220624999999999), // 20
    (0.40308984374999995, 0.83375390625), // 21
    (0.373359375, 0.8460156249999999), // 22
    (0.34224609375, 0.85884765625), // 23
    (0.30974999999999997, 0.87225), // 24
    (0.27587109374999996, 0.88622265625), // 25
    (0.24060937500000001, 0.900765625), // 26
    (0.20396484375, 0.91587890625), // 27
    (0.16593749999999996, 0.9315625), // 28
    (0.12652734374999997, 0.94781640625), // 29
    (0.08573437500000003, 0.9646406249999999), // 30
    (0.04355859375000004, 0.98203515625), // 31
    (0.0, 1.0), // 32
];

/// left, right pan values according to precomputed pan table
pub fn get_pan_values(pan: i8) -> anyhow::Result<(f32, f32)> {
    if pan > -32 && pan < 32 {
        return Ok(PAN_TABLE[(pan + 32) as usize]);
    } else {
        bail!("Pan value out of bounds: {}", pan);
    }
}
